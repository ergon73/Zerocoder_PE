import telebot
import config
import os
import warnings
from voice import get_all_voices, generate_audio
from pydub import AudioSegment
from pydub.utils import which

# üõ† –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ ffmpeg/ffprobe –≤ PATH
os.environ["PATH"] += os.pathsep + r"C:\Tools\ffmpeg\bin"

# üîá –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç pydub
warnings.filterwarnings("ignore", category=RuntimeWarning, module="pydub")

# –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ ffmpeg –∏ ffprobe
AudioSegment.converter = r"C:\Tools\ffmpeg\bin\ffmpeg.exe"
AudioSegment.ffprobe = r"C:\Tools\ffmpeg\bin\ffprobe.exe"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
if not os.path.isfile(AudioSegment.converter) or not os.path.isfile(AudioSegment.ffprobe):
    print("‚ùó ffmpeg –∏–ª–∏ ffprobe –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø—É—Ç—è–º!")
    print("–ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã.")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = config.bot_token
bot = telebot.TeleBot(API_TOKEN)

# –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–∞
voices = get_all_voices()

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤
voice_buttons = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
for voice in voices:
    voice_buttons.add(telebot.types.KeyboardButton(voice['name']))

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
selected_voice = {}
last_audio = {}
awaiting_download = {}
awaiting_format = {}

# –ö–Ω–æ–ø–∫–∏ "–î–∞ / –ù–µ—Ç"
yes_no_buttons = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
yes_no_buttons.add("–î–∞", "–ù–µ—Ç")

# –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤
format_buttons = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
format_buttons.add("mp3", "ogg", "wav")


@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    bot.reply_to(
        message,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞. –í—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å:",
        reply_markup=voice_buttons
    )


@bot.message_handler(func=lambda message: message.text in [v['name'] for v in voices])
def voice_selected(message):
    user_id = message.from_user.id
    selected_voice[user_id] = message.text
    bot.send_message(user_id, f"–í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: {message.text}. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è.")


@bot.message_handler(func=lambda m: awaiting_download.get(m.from_user.id, False))
def handle_download_choice(message):
    user_id = message.from_user.id
    awaiting_download[user_id] = False

    if message.text.lower() == "–¥–∞":
        awaiting_format[user_id] = True
        bot.send_message(user_id, "–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?", reply_markup=format_buttons)
    else:
        bot.send_message(user_id, "–û–∫–µ–π, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é üòâ", reply_markup=telebot.types.ReplyKeyboardRemove())


@bot.message_handler(func=lambda m: awaiting_format.get(m.from_user.id, False))
def handle_format_choice(message):
    user_id = message.from_user.id
    awaiting_format[user_id] = False
    chosen_format = message.text.lower()

    if chosen_format not in ["mp3", "ogg", "wav"]:
        bot.send_message(user_id, "–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return

    input_path = last_audio.get(user_id)
    if not input_path or not os.path.exists(input_path):
        bot.send_message(user_id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ pydub
    audio = AudioSegment.from_file(input_path)
    output_path = input_path.replace(".mp3", f".{chosen_format}")
    audio.export(output_path, format=chosen_format)

    with open(output_path, "rb") as file:
        bot.send_document(user_id, file, visible_file_name=os.path.basename(output_path))

    bot.send_message(user_id, "–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ", reply_markup=telebot.types.ReplyKeyboardRemove())


@bot.message_handler(func=lambda message: True)
def generate_and_ask_download(message):
    user_id = message.from_user.id
    text = message.text

    voice_name = selected_voice.get(user_id, voices[0]['name'])
    voice_id = next(v['id'] for v in voices if v['name'] == voice_name)

    mp3_path = generate_audio(text, voice_id)
    last_audio[user_id] = mp3_path

    with open(mp3_path, "rb") as voice_file:
        bot.send_voice(user_id, voice_file)

    awaiting_download[user_id] = True
    bot.send_message(user_id, "–•–æ—á–µ—à—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª?", reply_markup=yes_no_buttons)


if __name__ == '__main__':
    bot.polling(none_stop=True)
